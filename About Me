-- Rolling System ( for my RNG game )

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Remote Events
local RemoteEvents = ReplicatedStorage:WaitForChild("Events")
local SaveInventory = RemoteEvents:WaitForChild("SaveInventory")
local LoadInventory = RemoteEvents:WaitForChild("LoadInventory")

-- References
local textLabel = script.Parent
local Button = script.Parent.Parent.RollButton
local ChanceText = script.Parent.Parent.Chance
local RarityText = script.Parent.Parent.RarityType
local PortalsFolder = ReplicatedStorage:WaitForChild("Portals")
local DeleteButton = script.Parent.Parent.Parent.InventoryFrame.DeleteButton
local DeleteMode = false

-- Inventory Setup
local InventoryFrame = script.Parent.Parent.Parent.InventoryFrame
local InventorySpace = InventoryFrame.InventorySpace
local ItemLabel = InventorySpace.Item
local Player = game.Players.LocalPlayer
local InventoryUtilities = require(ReplicatedStorage.Modules.InventoryUtilities)

-- Constants
local INVENTORY_COLUMNS = 5
local INVENTORY_ROWS = 4
local MAX_INVENTORY_SLOTS = INVENTORY_COLUMNS * INVENTORY_ROWS

-- Portal Data
local colorList = {
     {name = "Red Portal", color = Color3.new(1, 0.00392157, 0.00392157)},
     {name = "Blue Portal", color = Color3.new(0.101961, 0.101961, 1)},
     {name = "Orange Portal", color = Color3.new(1, 0.654902, 0.0627451)},
     {name = "White Portal", color = Color3.new(1, 1, 1)},
     {name = "Green Portal", color = Color3.new(0.184314, 1, 0.184314)},
     {name = "Cyan Portal", color = Color3.new(0.117647, 0.870588, 0.847059)},
     {name = "Purple Portal", color = Color3.new(0.72549, 0.105882, 0.835294)},
     {name = "Yellow Portal", color = Color3.new(0.917647, 1, 0)},
     {name = "Rainbow Portal", color = Color3.new(1, 0.329412, 0.901961)}
}

-- Helper Functions (Moved to top)
local function GetPortalRarity(portalName)
     local rarityList = {
          ["Red Portal"] = "Common",
          ["Blue Portal"] = "Uncommon",
          ["Orange Portal"] = "Rare",
          ["White Portal"] = "Uncommon",
          ["Green Portal"] = "Rare",
          ["Cyan Portal"] = "Rare",
          ["Purple Portal"] = "Legendary",
          ["Yellow Portal"] = "Epic",
          ["Rainbow Portal"] = "Mythic"
     }
     return rarityList[portalName] or "Common"
end

local function updateShards(amount)
     if Player and Player:FindFirstChild("leaderstats") then
          local shards = Player.leaderstats:FindFirstChild("Shards")
          if shards then
               local success, err = pcall(function()
                    local UpdateShards = RemoteEvents:WaitForChild("UpdateShards")
                    UpdateShards:FireServer(amount)
               end)
               if not success then
                    warn("Failed to update shards:", err)
               end
          end
     end
end


-- Create Confirmation Dialog
local ConfirmDelete = Instance.new("Frame")
ConfirmDelete.Name = "ConfirmDelete"
ConfirmDelete.Size = UDim2.new(0.3, 0, 0.2, 0)
ConfirmDelete.Position = UDim2.new(0.35, 0, 0.4, 0)
ConfirmDelete.BackgroundColor3 = Color3.new(0.227451, 0.227451, 0.227451)
ConfirmDelete.BackgroundTransparency = 0.3
ConfirmDelete.Visible = false
ConfirmDelete.Parent = script.Parent.Parent.Parent

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0.2, 0)
UICorner.Parent = ConfirmDelete

local UIStroke = Instance.new("UIStroke")
UIStroke.Color = Color3.new(0.137255, 0.14902, 0.835294)
UIStroke.Parent = ConfirmDelete

local Text = Instance.new("TextLabel")
Text.Size = UDim2.new(1, 0, 0.5, 0)
Text.BackgroundTransparency = 1
Text.Text = "Delete this portal?"
Text.TextColor3 = Color3.new(1, 1, 1)
Text.TextScaled = true
Text.Parent = ConfirmDelete

local Yes = Instance.new("TextButton")
Yes.Name = "Yes"
Yes.Size = UDim2.new(0.4, 0, 0.3, 0)
Yes.Position = UDim2.new(0.1, 0, 0.6, 0)
Yes.BackgroundColor3 = Color3.new(0, 1, 0)
Yes.Text = "Yes"
Yes.TextColor3 = Color3.new(1, 1, 1)
Yes.Parent = ConfirmDelete

local No = Instance.new("TextButton")
No.Name = "No"
No.Size = UDim2.new(0.4, 0, 0.3, 0)
No.Position = UDim2.new(0.5, 0, 0.6, 0)
No.BackgroundColor3 = Color3.new(1, 0, 0)
No.Text = "No"
No.TextColor3 = Color3.new(1, 1, 1)
No.Parent = ConfirmDelete

-- Inventory Management System
local InventorySystem = {}
InventorySystem.__index = InventorySystem

function InventorySystem.new()
     local self = setmetatable({
          items = {},
          maxSlots = MAX_INVENTORY_SLOTS
     }, InventorySystem)

     self:createInventoryGrid()
     self:loadInventory()
     return self
end

function InventorySystem:createInventoryGrid()
     for _, child in ipairs(InventorySpace:GetChildren()) do
          if child:IsA("UIGridLayout") then
               child:Destroy()
          end
     end

     local gridLayout = Instance.new("UIGridLayout")
     gridLayout.CellSize = UDim2.new(0, 50, 0, 50)
     gridLayout.CellPadding = UDim2.new(0, 5, 0, 5)
     gridLayout.Parent = InventorySpace
end

function InventorySystem:saveInventory()
     SaveInventory:FireServer(self.items)
end

function InventorySystem:loadInventory()
     LoadInventory:FireServer()
end

function InventorySystem:deletePortal(index)
     if self.items[index] then
          if self.items[index].quantity and self.items[index].quantity > 1 then
               self.items[index].quantity = self.items[index].quantity - 1
          else
               table.remove(self.items, index)
          end
          self:updateInventoryUI()
          self:saveInventory()
          return true
     end
     return false
end

function InventorySystem:addPortal(portalData)
     for i, item in pairs(self.items) do
          if item.name == portalData.name then
               if not item.quantity then
                    item.quantity = 2
               else
                    item.quantity = item.quantity + 1
               end
               self:updateInventoryUI()
               self:saveInventory()
               return true 
          end
     end

     if #self.items < self.maxSlots then
          portalData.quantity = 1
          table.insert(self.items, portalData)
          self:updateInventoryUI()
          self:saveInventory()
          return true
     end
     return false 
end

function InventorySystem:enableDragAndDrop(frame)
     local dragging = false
     local dragInput
     local dragStart
     local startPos

     frame.InputBegan:Connect(function(input)
          if input.UserInputType == Enum.UserInputType.MouseButton1 then
               dragging = true
               dragStart = input.Position
               startPos = frame.Position
          end
     end)

     frame.InputEnded:Connect(function(input)
          if input.UserInputType == Enum.UserInputType.MouseButton1 then
               dragging = false
          end
     end)

     UserInputService.InputChanged:Connect(function(input)
          if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
               local delta = input.Position - dragStart
               frame.Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
               )
          end
     end)
end

function InventorySystem:updateInventoryUI()
     for _, child in ipairs(InventorySpace:GetChildren()) do
          if child:IsA("Frame") then
               child:Destroy()
          end
     end

     for index, portal in ipairs(self.items) do
          local itemFrame = Instance.new("Frame")
          itemFrame.Size = UDim2.new(0.162, 0, 0.261, 0)
          itemFrame.BackgroundColor3 = Color3.new(0.227451, 0.227451, 0.227451)
          itemFrame.BorderSizePixel = 2
          itemFrame.BackgroundTransparency = 0.3

          local SelectionHighlight = Instance.new("UIStroke")
          SelectionHighlight.Color = Color3.new(1, 0, 0)
          SelectionHighlight.Thickness = 2
          SelectionHighlight.Transparency = 1
          SelectionHighlight.Parent = itemFrame

          local itemLabel = Instance.new("TextButton")
          itemLabel.Size = UDim2.new(1, 0, 1, 0)
          itemLabel.BackgroundTransparency = 1
          itemLabel.Text = portal.name
          itemLabel.TextScaled = true 
          itemLabel.TextWrapped = true
          itemLabel.Parent = itemFrame
          itemLabel.TextColor3 = InventoryUtilities.deserializeColor3(portal.color)
          itemLabel.Font = Enum.Font.PermanentMarker
          
          -- Add this inside your updateInventoryUI function where you create the itemLabel
          if portal.rarity == "Mythic" then
               local gradient = Instance.new("UIGradient")
               gradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.new(1, 0, 0)),
                    ColorSequenceKeypoint.new(0.2, Color3.new(1, 0.5, 0)),
                    ColorSequenceKeypoint.new(0.4, Color3.new(1, 1, 0)),
                    ColorSequenceKeypoint.new(0.6, Color3.new(0, 1, 0)),
                    ColorSequenceKeypoint.new(0.8, Color3.new(0, 0, 1)),
                    ColorSequenceKeypoint.new(1, Color3.new(0.7, 0, 1))
               })
               gradient.Parent = itemLabel

               -- Animate the gradient
               local offset = 0
               game:GetService("RunService").RenderStepped:Connect(function()
                    offset = (offset + 0.001) % 1
                    gradient.Offset = Vector2.new(offset, 0)
               end)
          end

          -- Add quantity display
          if portal.quantity and portal.quantity > 1 then
               local quantityLabel = Instance.new("TextLabel")
               quantityLabel.Size = UDim2.new(0.3, 0, 0.3, 0)
               quantityLabel.Position = UDim2.new(0.7, 0, 0, 0)
               quantityLabel.BackgroundColor3 = Color3.new(0, 0, 0)
               quantityLabel.BackgroundTransparency = 0.5
               quantityLabel.TextColor3 = Color3.new(1, 1, 1)
               quantityLabel.Text = tostring(portal.quantity)
               quantityLabel.TextScaled = true
               quantityLabel.Parent = itemFrame

               local cornerRadius = Instance.new("UICorner")
               cornerRadius.CornerRadius = UDim.new(0.5, 0)
               cornerRadius.Parent = quantityLabel
          end

          -- Add rarity indicator
          local rarityLabel = Instance.new("TextLabel")
          rarityLabel.Size = UDim2.new(0.8, 0, 0.2, 0)
          rarityLabel.Position = UDim2.new(0.1, 0, 0.8, 0)
          rarityLabel.BackgroundTransparency = 0.5
          rarityLabel.Text = portal.rarity or "Common"
          rarityLabel.TextColor3 = Color3.new(1, 1, 1)
          rarityLabel.TextScaled = true
          rarityLabel.Parent = itemFrame

          local rarityColors = {
               Common = Color3.new(0.7, 0.7, 0.7),
               Uncommon = Color3.new(0, 0.7, 0),
               Rare = Color3.new(0, 0, 1),
               Epic = Color3.new(0.7, 0, 1),
               Legendary = Color3.new(1, 0.7, 0),
               Mythic = Color3.new(1, 0.329412, 0.901961)
          }
          rarityLabel.BackgroundColor3 = rarityColors[portal.rarity] or rarityColors.Common

          local rarityCorner = Instance.new("UICorner")
          rarityCorner.CornerRadius = UDim.new(0.3, 0)
          rarityCorner.Parent = rarityLabel

          -- Click handler for delete mode
          itemLabel.MouseButton1Click:Connect(function()
               if DeleteMode then
                    ConfirmDelete.Visible = true
                    Yes.MouseButton1Click:Once(function()
                         if portal.quantity and portal.quantity > 1 then
                              portal.quantity = portal.quantity - 1
                              self:updateInventoryUI()
                         else
                              self:deletePortal(index)
                         end
                         ConfirmDelete.Visible = false
                         DeleteMode = false
                         DeleteButton.BackgroundColor3 = Color3.new(0.227451, 0.227451, 0.227451)
                         self:saveInventory()
                    end)
                    No.MouseButton1Click:Once(function()
                         ConfirmDelete.Visible = false
                    end)
               end
          end)

          -- Hover effects
          itemLabel.MouseEnter:Connect(function()
               if DeleteMode then
                    SelectionHighlight.Transparency = 0
               end
               -- Add hover animation
               game:GetService("TweenService"):Create(itemFrame, TweenInfo.new(0.2), {
                    BackgroundTransparency = 0.1
               }):Play()
          end)

          itemLabel.MouseLeave:Connect(function()
               SelectionHighlight.Transparency = 1
               -- Remove hover animation
               game:GetService("TweenService"):Create(itemFrame, TweenInfo.new(0.2), {
                    BackgroundTransparency = 0.3
               }):Play()
          end)

          -- UI Corner for main frame
          local ItemCorner = Instance.new("UICorner")
          ItemCorner.CornerRadius = UDim.new(0.1, 0)
          ItemCorner.Parent = itemFrame

          -- UI Stroke for main frame
          local ItemStroke = Instance.new("UIStroke")
          ItemStroke.Color = Color3.new(0.258824, 0.203922, 1)
          ItemStroke.Thickness = 2
          ItemStroke.Parent = itemFrame

          -- Add shadow effect
          local shadowFrame = Instance.new("Frame")
          shadowFrame.Size = UDim2.new(1, 4, 1, 4)
          shadowFrame.Position = UDim2.new(0, -2, 0, -2)
          shadowFrame.BackgroundColor3 = Color3.new(0, 0, 0)
          shadowFrame.BackgroundTransparency = 0.7
          shadowFrame.ZIndex = itemFrame.ZIndex - 1
          shadowFrame.Parent = itemFrame

          local shadowCorner = Instance.new("UICorner")
          shadowCorner.CornerRadius = UDim.new(0.1, 0)
          shadowCorner.Parent = shadowFrame

          itemFrame.Parent = InventorySpace
          self:enableDragAndDrop(itemFrame)
     end

     -- Add empty slots to fill the grid
     local totalSlots = INVENTORY_COLUMNS * INVENTORY_ROWS
     local currentItems = #self.items

     for i = currentItems + 1, totalSlots do
          local emptySlot = Instance.new("Frame")
          emptySlot.Size = UDim2.new(0.162, 0, 0.261, 0)
          emptySlot.BackgroundColor3 = Color3.new(0.227451, 0.227451, 0.227451)
          emptySlot.BackgroundTransparency = 0.8
          emptySlot.BorderSizePixel = 0

          local emptyCorner = Instance.new("UICorner")
          emptyCorner.CornerRadius = UDim.new(0.1, 0)
          emptyCorner.Parent = emptySlot

          local emptyStroke = Instance.new("UIStroke")
          emptyStroke.Color = Color3.new(0.258824, 0.203922, 1)
          emptyStroke.Transparency = 0.8
          emptyStroke.Parent = emptySlot

          emptySlot.Parent = InventorySpace
     end
end

-- Initialize Inventory System
local inventorySystem = InventorySystem.new()

-- Roll Function
local function Roll()
     local quickRollActive = Player:GetAttribute("QuickRollActive") or false
     local isMythicRoll = math.random(1, 100) == 1  -- 1% chance

     if quickRollActive then
          local randomPortal
          if isMythicRoll then
               randomPortal = {name = "Rainbow Portal", color = Color3.new(1, 0.329412, 0.901961)}
          else
               randomPortal = colorList[math.random(1, #colorList - 1)]
          end
          ItemLabel.Text = randomPortal.name
          ItemLabel.TextColor3 = randomPortal.color

          local portalRarity = GetPortalRarity(randomPortal.name)
          RarityText.Text = portalRarity

          if portalRarity == "Mythic" then
               updateShards(325)
               ChanceText.Text = "MYTHIC! +325 Shards!"
          elseif portalRarity == "Legendary" then
               local shardReward = math.random(100, 150)
               updateShards(shardReward)
               ChanceText.Text = "LEGENDARY! +" .. shardReward .. " Shards!"
          else
               ChanceText.Text = "You got: " .. randomPortal.name .. "!"
          end
          textLabel.Text = randomPortal.name

          local toolName = randomPortal.name:gsub(" Portal", "") .. "Portal"
          local portalTool = PortalsFolder:FindFirstChild(toolName)

          if portalTool then
               local char = Player.Character or Player.CharacterAdded:Wait()
               local toolClone = portalTool:Clone()
               toolClone.Parent = Player.Backpack

               local model = toolClone:FindFirstChildOfClass("Model")
               if model and model.PrimaryPart then
                    local connection
                    connection = RunService.Heartbeat:Connect(function()
                         if char and char:FindFirstChild("UpperTorso") then
                              local torsoCFrame = char.UpperTorso.CFrame
                              local targetPosition = torsoCFrame.Position - torsoCFrame.LookVector * 10
                              local facingCFrame = CFrame.new(targetPosition, torsoCFrame.Position)
                              facingCFrame = facingCFrame * CFrame.Angles(0, math.rad(90), 0)
                              model:SetPrimaryPartCFrame(facingCFrame)
                         else
                              connection:Disconnect()
                         end
                    end)

                    toolClone.AncestryChanged:Connect(function(_, parent)
                         if not parent then
                              if connection then
                                   connection:Disconnect()
                              end
                         end
                    end)
               end
          end

          inventorySystem:addPortal({
               name = randomPortal.name,
               color = randomPortal.color,
               rarity = portalRarity
          })

          Player:SetAttribute("QuickRollActive", false)
          return
     end

     local running = true
     local waitTime = 0.5
     local Chance = math.random(1, 500)
     local chancesText = "1 In " .. Chance .. " Chance"
     local finalColor = ""
     local finalColorRGB = ""

     while running do
          local randomPortal
          if isMythicRoll then
               randomPortal = {name = "Rainbow Portal", color = Color3.new(1, 0.329412, 0.901961)}
          else
               randomPortal = colorList[math.random(1, #colorList - 1)]
          end
          textLabel.Text = randomPortal.name
          textLabel.TextColor3 = randomPortal.color
          ChanceText.Text = chancesText

          Chance = math.random(1, 500)
          chancesText = "1 In " .. Chance .. " Chance"

          wait(waitTime)
          waitTime = waitTime * 0.95
          if waitTime < 0.05 then
               finalColor = randomPortal.name
               finalColorRGB = randomPortal.color
               break
          end
     end

     local portalRarity = GetPortalRarity(finalColor)
     RarityText.Text = portalRarity

     if portalRarity == "Mythic" then
          updateShards(325)
          ChanceText.Text = "MYTHIC! +325 Shards!"
     elseif portalRarity == "Legendary" then
          local shardReward = math.random(100, 150)
          updateShards(shardReward)
          ChanceText.Text = "LEGENDARY! +" .. shardReward .. " Shards!"
     else
          ChanceText.Text = "You spun " .. finalColor .. "!"
     end

     wait(3)

     ItemLabel.Text = finalColor
     ItemLabel.TextColor3 = finalColorRGB

     inventorySystem:addPortal({
          name = finalColor,
          color = finalColorRGB,
          rarity = portalRarity
     })

     local toolName = finalColor:gsub(" Portal", "") .. "Portal"
     local portalTool = PortalsFolder:FindFirstChild(toolName)

     if portalTool then
          local char = Player.Character or Player.CharacterAdded:Wait()
          local toolClone = portalTool:Clone()
          toolClone.Parent = Player.Backpack

          local model = toolClone:FindFirstChildOfClass("Model")
          if model and model.PrimaryPart then
               local connection
               connection = RunService.Heartbeat:Connect(function()
                    if char and char:FindFirstChild("UpperTorso") then
                         local torsoCFrame = char.UpperTorso.CFrame
                         local targetPosition = torsoCFrame.Position - torsoCFrame.LookVector * 10
                         local facingCFrame = CFrame.new(targetPosition, torsoCFrame.Position)
                         facingCFrame = facingCFrame * CFrame.Angles(0, math.rad(90), 0)
                         model:SetPrimaryPartCFrame(facingCFrame)
                    else
                         connection:Disconnect()
                    end
               end)

               toolClone.AncestryChanged:Connect(function(_, parent)
                    if not parent then
                         if connection then
                              connection:Disconnect()
                         end
                    end
               end)
          end
     end

     Chance = math.random(1, 500)
     ChanceText.Text = "1 In " .. Chance .. " Chance"
end


-- Connect button to Roll function
Button.MouseButton1Click:Connect(Roll)

-- Delete button handler
DeleteButton.MouseButton1Click:Connect(function()
     DeleteMode = not DeleteMode
     if DeleteMode then
          DeleteButton.BackgroundColor3 = Color3.new(1, 0, 0)
     else
          DeleteButton.BackgroundColor3 = Color3.new(0.227451, 0.227451, 0.227451)
     end
end)

-- Auto-save inventory with error handling
task.spawn(function()
     while task.wait(30) do
          local success, err = pcall(function()
               inventorySystem:saveInventory()
          end)
          if not success then
               warn("Failed to auto-save inventory:", err)
          end
     end
end)

-- Handle inventory data received from server
LoadInventory.OnClientEvent:Connect(function(data)
     inventorySystem.items = data
     inventorySystem:updateInventoryUI()
end)

-- Make Roll function available globally
_G.Roll = Roll
script.Parent:SetAttribute("CanRoll", true)
